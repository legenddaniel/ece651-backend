#!/usr/bin/env bash

# We basically create macro for docker-compose
COMPOSE="docker-compose"
BACKEND="app"

COL_RESET="\x1b[39;49;00m"
COL_LYELLOW="\x1b[33;02m"
COL_LGREEN="\x1b[32;01m"
COL_CYAN="\x1b[0;36m"

# Helpers
helper() {
    commands="\n${COL_CYAN}Commands:\n${COL_RESET}"
    commands="$commands start                   Start server\n"
    commands="$commands stop                    Stop server\n"
    commands="$commands build                   Build docker container\n"
    commands="$commands django [...cmd]         Run Django ${COL_LYELLOW}manage.py${COL_RESET} commands. Run ${COL_LGREEN}./leh django -h${COL_RESET} or check their doc for help\n"
    commands="$commands coverage [...cmd]       Run Django test with coverage\n"
    commands="$commands coverage-html           Export coverage test report to /htmlcov\n"

    printf "$commands\n"
}

# Run docker compose commands if applicable, or show helper
if [ $# -gt 0 ]; then
    if [ "$1" == "start" ]; then
        $COMPOSE up
    elif [ "$1" == "stop" ]; then
        $COMPOSE down
    elif [ "$1" == "build" ]; then
        $COMPOSE build
    elif [ "$1" == "django" ]; then
        shift
        $COMPOSE exec $BACKEND python manage.py $@
    elif [ "$1" == "coverage" ]; then
        shift
        $COMPOSE exec $BACKEND coverage run manage.py test $@
    elif [ "$1" == "coverage-html" ]; then
        $COMPOSE exec $BACKEND coverage html
    else
        helper
        exit 1
    fi
else
    helper
    exit 1
fi
